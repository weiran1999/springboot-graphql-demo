schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Hero {
  id: ID!,
  name: String!,
  line: Int!,
  isPick: Boolean!
}

type Log {
  id: ID!,
  teamId: Int!,
  pickGroup: String!,
  time: MyDate!
}

type Team {
  id: ID!,
  encryptCode: String!,
  pickContent: String!,
  isPicked: Boolean!,
  updateTime: MyDate!
}

type MyResult {
  teamId: Int,
  data: String!,
  time: MyDate!,
  logs: [LogResponse]
}

type LogResponse {
  teamId: Int,
  pickGroup: String!,
  time: MyDate!
}

input PostParam {
  encryptCode: String
}

scalar MyDate

type Query {
  getHeroesNotIsPick: [Hero]
  getLogByTeamId(teamId: Int!): [Log]
  getTeamByEncryptCode(encryptCode: String!): Team
  pickHeroes(param: PostParam!): MyResult
}

type Mutation {
  clearAllHero: Int
  clearOneTeam(id: ID!): Int
  clearAllTeam: Int
}

type Subscription {
  getHeroUpdate(id: ID!): Hero
}
